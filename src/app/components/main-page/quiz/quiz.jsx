"use client";
import { useState, useEffect } from "react";
import styles from "./quiz.module.scss";
import Image from "next/image";

export default function Quiz() {
  const [step, setStep] = useState(0);
  const [formData, setFormData] = useState({
    eventType: "",
    customEventType: "",
    guests: 50,
    budget: "",
    customBudget: "",
    services: [],
    name: "",
    contact: "",
    contactType: "phone",
    privacyPolicy: true,
  });
  const [isAnimating, setIsAnimating] = useState(false);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const questions = [
    {
      title: "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?",
      type: "radio",
      name: "eventType",
      options: [
        { value: "–°–≤–∞–¥—å–±–∞", label: "–°–≤–∞–¥—å–±–∞" },
        { value: "–Æ–±–∏–ª–µ–π", label: "–Æ–±–∏–ª–µ–π" },
        { value: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", label: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤" },
        { value: "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", label: "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" },
        { value: "–î—Ä—É–≥–æ–µ", label: "–î—Ä—É–≥–æ–µ" },
      ],
    },
    {
      title: "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?",
      type: "guests",
      name: "guests",
      min: 1,
      max: 200,
    },
    {
      title: "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?",
      type: "budget",
      name: "budget",
      options: [
        { value: "2300", label: "2300 —Ä—É–±–ª–µ–π" },
        { value: "2900", label: "2900 —Ä—É–±–ª–µ–π" },
        { value: "3300", label: "3300 —Ä—É–±–ª–µ–π" },
        { value: "–î—Ä—É–≥–æ–π", label: "–î—Ä—É–≥–æ–π" },
      ],
    },
    {
      title: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
      type: "checkbox",
      name: "services",
      options: [
        { value: "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω", label: "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω" },
        {
          value: "–ü–∏—Ä–∞–º–∏–¥–∞ –∏–∑ –±–æ–∫–∞–ª–æ–≤ —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ",
          label: "–ü–∏—Ä–∞–º–∏–¥–∞ –∏–∑ –±–æ–∫–∞–ª–æ–≤ —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ",
        },
        {
          value: "–£–∫—Ä–∞—à–µ–Ω–∏–µ —Å—Ç–æ–ª–∞ + —Ñ–æ—Ç–æ–∑–æ–Ω–∞",
          label: "–£–∫—Ä–∞—à–µ–Ω–∏–µ —Å—Ç–æ–ª–∞ + —Ñ–æ—Ç–æ–∑–æ–Ω–∞",
        },
        { value: "–ù–∏—á–µ–≥–æ", label: "–ù–∏—á–µ–≥–æ" },
      ],
    },
  ];

  const calculatePrice = () => {
    const basePrice =
      formData.budget === "–î—Ä—É–≥–æ–π"
        ? parseInt(formData.customBudget) || 0
        : parseInt(formData.budget) || 0;
    const guests = formData.guests;
    let total = basePrice * guests;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
    if (formData.services.includes("–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω")) total += 5000;
    if (formData.services.includes("–ü–∏—Ä–∞–º–∏–¥–∞ –∏–∑ –±–æ–∫–∞–ª–æ–≤ —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ"))
      total += 3000;
    if (formData.services.includes("–£–∫—Ä–∞—à–µ–Ω–∏–µ —Å—Ç–æ–ª–∞ + —Ñ–æ—Ç–æ–∑–æ–Ω–∞")) total += 8000;

    return total;
  };

  const handleNext = () => {
    setIsAnimating(true);
    setTimeout(() => {
      setStep((prev) => prev + 1);
      setIsAnimating(false);
    }, 300);
  };

  const handleBack = () => {
    setIsAnimating(true);
    setTimeout(() => {
      setStep((prev) => prev - 1);
      setIsAnimating(false);
    }, 300);
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: "" }));
    }

    if (type === "checkbox") {
      setFormData((prev) => {
        const services = [...prev.services];
        if (checked) {
          if (value === "–ù–∏—á–µ–≥–æ") {
            return { ...prev, services: ["–ù–∏—á–µ–≥–æ"] };
          } else {
            return {
              ...prev,
              services: services.filter((s) => s !== "–ù–∏—á–µ–≥–æ").concat(value),
            };
          }
        } else {
          return { ...prev, services: services.filter((s) => s !== value) };
        }
      });
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: value,
      }));
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const validateName = (name) => {
    if (!name.trim()) return "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
    if (name.trim().length < 2) return "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞";
    if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$/.test(name))
      return "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã";
    return "";
  };

  const validatePhone = (phone) => {
    if (!phone.trim()) return "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
    const phoneRegex =
      /^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
    if (!phoneRegex.test(phone.replace(/\s/g, "")))
      return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
    return "";
  };

  const validateEmail = (email) => {
    if (!email.trim()) return "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å";
    return "";
  };

  const validateTelegram = (telegram) => {
    if (!telegram.trim()) return "Telegram username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    if (!/^@?[a-zA-Z0-9_]{5,32}$/.test(telegram))
      return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram username (–æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤)";
    return "";
  };

  const validateWhatsApp = (whatsapp) => {
    if (!whatsapp.trim()) return "WhatsApp –Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    const phoneRegex =
      /^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
    if (!phoneRegex.test(whatsapp.replace(/\s/g, "")))
      return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä WhatsApp";
    return "";
  };

  const validateForm = () => {
    const newErrors = {};

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    const nameError = validateName(formData.name);
    if (nameError) newErrors.name = nameError;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (formData.contactType) {
      case "phone":
        const phoneError = validatePhone(formData.contact);
        if (phoneError) newErrors.contact = phoneError;
        break;
      case "email":
        const emailError = validateEmail(formData.contact);
        if (emailError) newErrors.contact = emailError;
        break;
      case "telegram":
        const telegramError = validateTelegram(formData.contact);
        if (telegramError) newErrors.contact = telegramError;
        break;
      case "whatsapp":
        const whatsappError = validateWhatsApp(formData.contact);
        if (whatsappError) newErrors.contact = whatsappError;
        break;
      default:
        newErrors.contact = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏";
    }

    if (!formData.privacyPolicy) {
      newErrors.privacyPolicy =
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const formatPhone = (value) => {
    const numbers = value.replace(/\D/g, "");
    if (numbers.length <= 1) return value;

    let formatted = "+7 ";
    if (numbers.length > 1) {
      formatted += numbers.substring(1, 4);
    }
    if (numbers.length > 4) {
      formatted += " " + numbers.substring(4, 7);
    }
    if (numbers.length > 7) {
      formatted += " " + numbers.substring(7, 9);
    }
    if (numbers.length > 9) {
      formatted += " " + numbers.substring(9, 11);
    }
    return formatted;
  };

  const handleContactChange = (e) => {
    const { name, value } = e.target;

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (
      (formData.contactType === "phone" ||
        formData.contactType === "whatsapp") &&
      name === "contact"
    ) {
      const formattedValue = formatPhone(value);
      setFormData((prev) => ({ ...prev, [name]: formattedValue }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: "" }));
    }
  };

  const sendToTelegram = async (data) => {
    const message = `
    –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–∞–Ω–∫–µ—Ç –∏–∑ –∫–≤–∏–∑–∞!

üí∞ –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò:
‚Ä¢ –§–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${
      data.eventType === "–î—Ä—É–≥–æ–µ" ? data.customEventType : data.eventType
    }
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${data.guests} —á–µ–ª–æ–≤–µ–∫
‚Ä¢ –ë—é–¥–∂–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞: ${
      data.budget === "–î—Ä—É–≥–æ–π" ? data.customBudget + " ‚ÇΩ" : data.budget + " ‚ÇΩ"
    }
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: ${data.services.join(", ") || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"}
‚Ä¢ –ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: ${calculatePrice().toLocaleString()} ‚ÇΩ
‚Ä¢ –ü–û–î–ê–†–û–ö: 3000 ‚ÇΩ

üë§ –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï:
‚Ä¢ –ò–º—è: ${data.name}
‚Ä¢ –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${data.contactType}
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç: ${data.contact}

‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString("ru-RU")}
    `;

    try {
      const response = await fetch("/api/send-to-telegram", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: message,
        }),
      });

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram");
      }

      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      throw error;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
      await sendToTelegram(formData);

      setIsAnimating(true);
      setTimeout(() => {
        setStep(7);
        setIsAnimating(false);
        setIsSubmitting(false);
      }, 300);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
      alert(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
      setIsSubmitting(false);
    }
  };

  const renderQuestion = () => {
    if (step === 0) return null;
    const question = questions[step - 1];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—è "–î—Ä—É–≥–æ–µ"
    const isOtherFieldEmpty =
      step === 1 &&
      formData.eventType === "–î—Ä—É–≥–æ–µ" &&
      !formData.customEventType.trim();

    return (
      <div
        className={`${styles.question} ${
          isAnimating ? styles.fadeOut : styles.fadeIn
        }`}
      >
        <div className={styles.progress}>
          <div
            className={styles.progressBar}
            style={{ width: `${(step / (questions.length + 1)) * 100}%` }}
          ></div>
          <span className={styles.progressText}>
            –®–∞–≥ {step} –∏–∑ {questions.length + 1}
          </span>
        </div>

        <h2 className={styles.questionTitle}>{question.title}</h2>

        {question.type === "radio" && (
          <div className={styles.options}>
            {question.options.map((option, index) => (
              <label
                key={index}
                className={`${styles.option} ${
                  formData[question.name] === option.value ? styles.active : ""
                }`}
              >
                <input
                  type="radio"
                  name={question.name}
                  value={option.value}
                  checked={formData[question.name] === option.value}
                  onChange={handleChange}
                />
                {option.label}
              </label>
            ))}
            {formData.eventType === "–î—Ä—É–≥–æ–µ" && (
              <input
                type="text"
                name="customEventType"
                value={formData.customEventType}
                onChange={handleChange}
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
                className={styles.textInput}
                required
              />
            )}
          </div>
        )}

        {question.type === "guests" && (
          <div className={styles.rangeContainer}>
            <div className={styles.guestsValue}>
              <span className={styles.selectedValue}>{formData.guests}</span>
              <span>—á–µ–ª–æ–≤–µ–∫</span>
            </div>
            <input
              type="range"
              name={question.name}
              min={question.min}
              max={question.max}
              value={formData[question.name]}
              onChange={handleChange}
              className={styles.rangeInput}
            />
            <div className={styles.rangeValues}>
              <span>{question.min}</span>
              <span>{question.max}</span>
            </div>
          </div>
        )}

        {question.type === "budget" && (
          <div className={styles.options}>
            {question.options.map((option, index) => (
              <label
                key={index}
                className={`${styles.option} ${
                  formData[question.name] === option.value ? styles.active : ""
                }`}
              >
                <input
                  type="radio"
                  name={question.name}
                  value={option.value}
                  checked={formData[question.name] === option.value}
                  onChange={handleChange}
                />
                {option.label}
              </label>
            ))}
            {formData.budget === "–î—Ä—É–≥–æ–π" && (
              <input
                type="number"
                name="customBudget"
                value={formData.customBudget}
                onChange={handleChange}
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö"
                className={styles.textInput}
                required
              />
            )}
          </div>
        )}

        {question.type === "checkbox" && (
          <div className={styles.options}>
            {question.options.map((option, index) => (
              <label
                key={index}
                className={`${styles.option} ${
                  formData.services.includes(option.value) ? styles.active : ""
                }`}
              >
                <input
                  type="checkbox"
                  name={question.name}
                  value={option.value}
                  checked={formData.services.includes(option.value)}
                  onChange={handleChange}
                />
                {option.label}
              </label>
            ))}
          </div>
        )}

        <div className={styles.navigation}>
          <button
            onClick={handleBack}
            className={styles.backButton}
            disabled={step === 1}
          >
            –ù–∞–∑–∞–¥
          </button>
          <button
            onClick={handleNext}
            className={styles.nextButton}
            disabled={
              (step === 1 && !formData.eventType) ||
              (step === 1 &&
                formData.eventType === "–î—Ä—É–≥–æ–µ" &&
                !formData.customEventType.trim()) ||
              (step === 3 && !formData.budget) ||
              (step === 3 &&
                formData.budget === "–î—Ä—É–≥–æ–π" &&
                !formData.customBudget) ||
              (step === 4 && formData.services.length === 0)
            }
          >
            {step === questions.length ? "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å" : "–î–∞–ª–µ–µ"}
          </button>
        </div>
      </div>
    );
  };

  const renderPrice = () => (
    <div
      className={`${styles.priceScreen} ${
        isAnimating ? styles.fadeOut : styles.fadeIn
      }`}
    >
      <div className={styles.priceContent}>
        <div className={styles.priceIcon}>üí∞</div>
        <h2 className={styles.priceTitle}>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–µ—Ç–∞</h2>
        <div className={styles.priceAmount}>
          {calculatePrice().toLocaleString()} ‚ÇΩ
        </div>
        <p className={styles.priceDescription}>
          –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
          <br />
          {formData.eventType === "–î—Ä—É–≥–æ–µ"
            ? formData.customEventType
            : formData.eventType}{" "}
          ‚Ä¢ {formData.guests} —á–µ–ª–æ–≤–µ–∫ ‚Ä¢{" "}
          {formData.budget === "–î—Ä—É–≥–æ–π"
            ? formData.customBudget
            : formData.budget}{" "}
          ‚ÇΩ/—á–µ–ª
        </p>
        <div
          style={{
            display: "flex",
            flexDirection: "column",
          }}
        >
          <button onClick={handleNext} className={styles.giftButton}>
            –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 3000 ‚ÇΩ
          </button>

          <button
            onClick={handleBack}
            className={styles.backButton}
            style={{
              marginTop: "15px",
              background: "transparent",
              border: "2px solid #e9ecef",
              color: "#000000ff",
            }}
          >
            –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
          </button>
        </div>
      </div>
    </div>
  );

  const renderContactForm = () => (
    <form
      onSubmit={handleSubmit}
      className={`${styles.contactForm} ${
        isAnimating ? styles.fadeOut : styles.fadeIn
      }`}
    >
      <h2 className={styles.formTitle}>–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ 3000 ‚ÇΩ</h2>
      <p className={styles.formDescription}>
        –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º—ã –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –≤–∞—Å —Å–∫–∏–¥–∫—É
      </p>

      <div className={styles.inputGroup}>
        <label>–í–∞—à–µ –∏–º—è *</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleContactChange}
          placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
          className={errors.name ? styles.inputError : ""}
          disabled={isSubmitting}
        />
        {errors.name && <span className={styles.errorText}>{errors.name}</span>}
      </div>

      <div className={styles.contactType}>
        <label>–ö—É–¥–∞ –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫? *</label>
        <div className={styles.contactOptions}>
          <label
            className={`${styles.contactOption} ${
              formData.contactType === "phone" ? styles.active : ""
            }`}
          >
            <input
              type="radio"
              name="contactType"
              value="phone"
              checked={formData.contactType === "phone"}
              onChange={handleChange}
              disabled={isSubmitting}
            />
            –¢–µ–ª–µ—Ñ–æ–Ω
          </label>
          <label
            className={`${styles.contactOption} ${
              formData.contactType === "email" ? styles.active : ""
            }`}
          >
            <input
              type="radio"
              name="contactType"
              value="email"
              checked={formData.contactType === "email"}
              onChange={handleChange}
              disabled={isSubmitting}
            />
            Email
          </label>
          <label
            className={`${styles.contactOption} ${
              formData.contactType === "telegram" ? styles.active : ""
            }`}
          >
            <input
              type="radio"
              name="contactType"
              value="telegram"
              checked={formData.contactType === "telegram"}
              onChange={handleChange}
              disabled={isSubmitting}
            />
            Telegram
          </label>
          <label
            className={`${styles.contactOption} ${
              formData.contactType === "whatsapp" ? styles.active : ""
            }`}
          >
            <input
              type="radio"
              name="contactType"
              value="whatsapp"
              checked={formData.contactType === "whatsapp"}
              onChange={handleChange}
              disabled={isSubmitting}
            />
            WhatsApp
          </label>
        </div>
      </div>

      <div className={styles.inputGroup}>
        <label>
          {formData.contactType === "phone" && "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *"}
          {formData.contactType === "email" && "Email –∞–¥—Ä–µ—Å *"}
          {formData.contactType === "telegram" && "Telegram username *"}
          {formData.contactType === "whatsapp" && "WhatsApp –Ω–æ–º–µ—Ä *"}
        </label>
        <input
          type="text"
          name="contact"
          value={formData.contact}
          onChange={handleContactChange}
          placeholder={
            formData.contactType === "phone"
              ? "+7 900 000-00-00"
              : formData.contactType === "email"
              ? "your@email.com"
              : formData.contactType === "telegram"
              ? "@username"
              : "+7 900 000-00-00"
          }
          className={errors.contact ? styles.inputError : ""}
          disabled={isSubmitting}
        />
        {errors.contact && (
          <span className={styles.errorText}>{errors.contact}</span>
        )}
      </div>

      <div className={styles.privacyPolicy}>
        <label className={styles.checkboxLabel}>
          <input
            type="checkbox"
            name="privacyPolicy"
            checked={formData.privacyPolicy}
            onChange={handleChange}
            disabled={isSubmitting}
            className={styles.checkboxInput}
          />
          <span className={styles.checkboxCustom}></span>
          <span className={styles.checkboxText}>
            –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ{" "}
            <a
              href="/privacy-policy"
              target="_blank"
              className={styles.privacyLink}
            >
              –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </a>
          </span>
        </label>
        {errors.privacyPolicy && (
          <span className={styles.errorText}>{errors.privacyPolicy}</span>
        )}
      </div>

      <div className={styles.navigation}>
        <button
          type="button"
          onClick={handleBack}
          className={styles.backButton}
          disabled={isSubmitting}
        >
          –ù–∞–∑–∞–¥
        </button>
        <button
          type="submit"
          className={styles.submitButton}
          disabled={isSubmitting}
        >
          {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"}
        </button>
      </div>
    </form>
  );

  const renderSuccess = () => (
    <div className={styles.successScreen}>
      <div className={styles.checkmark}>üéÅ</div>
      <h2 className={styles.successTitle}>–ü–æ–¥–∞—Ä–æ–∫ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω!</h2>
      <p className={styles.successText}>
        –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏
        –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ 3000 —Ä—É–±–ª–µ–π
      </p>
      <div className={styles.successDetails}>
        <p>
          –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–µ—Ç–∞:{" "}
          <strong>{calculatePrice().toLocaleString()} ‚ÇΩ</strong>
        </p>
        <p>
          –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: <strong className={styles.discount}>3000 ‚ÇΩ</strong>
        </p>
      </div>
    </div>
  );

  return (
    <div className={styles.container} id="quiz">
      {step === 0 && (
        <div
          className={`${styles.welcomeScreen} ${
            isAnimating ? styles.fadeOut : styles.fadeIn
          }`}
        >
          <div className={styles.welcomeContent}>
            <Image
              src={"/logo/logo.svg"}
              alt="–†–µ—Å—Ç–æ—Ä–∞–Ω –†—É–±–∏–Ω"
              width={120}
              height={60}
              className={styles.logo}
            />
            <h1 className={styles.welcomeTitle}>
              –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–µ—Ç–∞
            </h1>
            <p className={styles.welcomeText}>
              –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 4 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞
            </p>
            <button onClick={handleNext} className={styles.startButton}>
              –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–µ–≥–æ –±–∞–Ω–∫–µ—Ç–∞
            </button>
          </div>
        </div>
      )}

      {step > 0 && step <= questions.length && renderQuestion()}
      {step === questions.length + 1 && renderPrice()}
      {step === questions.length + 2 && renderContactForm()}
      {step === 7 && renderSuccess()}
    </div>
  );
}
