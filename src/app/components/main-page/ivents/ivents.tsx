"use client";
import { useState } from "react";
import styles from "./styles.module.scss";

interface CardProps {
  title: string;
  image: string;
  onCardClick: () => void;
}

function Card({ title, image, onCardClick }: CardProps) {
  return (
    <article
      className={styles.card}
      style={{ backgroundImage: `url(${image})` }}
      onClick={onCardClick}
      onKeyDown={(e) => e.key === "Enter" && onCardClick()}
      tabIndex={0}
      role="button"
      aria-label={`–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–æ–±—ã—Ç–∏–∏ ${title}`}
    >
      <div className={styles.overlay}></div>
      <div className={styles.cardContent}>
        <span>–ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï</span>
        <h3>{title}</h3>
      </div>
    </article>
  );
}

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  eventTitle: string;
}

interface FormErrors {
  name?: string;
  phone?: string;
  privacyPolicy?: string;
}

function Modal({ isOpen, onClose, eventTitle }: ModalProps) {
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    comment: "",
    privacyPolicy: true,
  });
  const [errors, setErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<"success" | "error" | null>(
    null
  );

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    const key = name as keyof FormErrors; // üü¢ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞

    if (type === "checkbox") {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData((prev) => ({ ...prev, [name]: checked }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }

    if (errors[key]) {
      setErrors((prev) => ({ ...prev, [key]: "" }));
    }
    if (submitStatus) {
      setSubmitStatus(null);
    }
  };

  const validateName = (name: string) => {
    if (!name.trim()) return "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
    if (name.trim().length < 2) return "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞";
    if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$/.test(name))
      return "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã";
    return "";
  };

  const validatePhone = (phone: string) => {
    if (!phone.trim()) return "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
    const phoneRegex =
      /^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
    if (!phoneRegex.test(phone.replace(/\s/g, "")))
      return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
    return "";
  };

  const validateForm = () => {
    const newErrors = {
      name: validateName(formData.name),
      phone: validatePhone(formData.phone),
      privacyPolicy: formData.privacyPolicy
        ? ""
        : "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    };

    setErrors(newErrors);
    return !newErrors.name && !newErrors.phone && !newErrors.privacyPolicy;
  };

  const formatPhone = (value: string) => {
    const numbers = value.replace(/\D/g, "");
    if (numbers.length <= 1) return value;

    let formatted = "+7 ";
    if (numbers.length > 1) {
      formatted += numbers.substring(1, 4);
    }
    if (numbers.length > 4) {
      formatted += " " + numbers.substring(4, 7);
    }
    if (numbers.length > 7) {
      formatted += " " + numbers.substring(7, 9);
    }
    if (numbers.length > 9) {
      formatted += " " + numbers.substring(9, 11);
    }
    return formatted;
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formattedValue = formatPhone(e.target.value);
    setFormData((prev) => ({ ...prev, phone: formattedValue }));

    if (errors.phone) {
      setErrors((prev) => ({ ...prev, phone: "" }));
    }
    if (submitStatus) {
      setSubmitStatus(null);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus(null);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–∞—à API route
      const response = await fetch("/api/events", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          eventTitle,
          name: formData.name.trim(),
          phone: formData.phone,
          comment: formData.comment.trim(),
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
      }

      setSubmitStatus("success");
      console.log("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", data);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      setTimeout(() => {
        onClose();
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setFormData({
          name: "",
          phone: "",
          comment: "",
          privacyPolicy: true,
        });
        setSubmitStatus(null);
      }, 2000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
      setSubmitStatus("error");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
        <button className={styles.closeButton} onClick={onClose}>
          √ó
        </button>

        <div className={styles.modalHeader}>
          <h2>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h2>
          <p>–ü–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é: {eventTitle}</p>
          <p className={styles.modalSubtitle}>–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º</p>
        </div>

        <form onSubmit={handleSubmit} className={styles.modalForm}>
          <div className={styles.inputGroup}>
            <label>–ò–º—è *</label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="–í–∞—à–µ –∏–º—è"
              className={errors.name ? styles.inputError : ""}
              disabled={isSubmitting}
            />
            {errors.name && (
              <span className={styles.errorText}>{errors.name}</span>
            )}
          </div>

          <div className={styles.inputGroup}>
            <label>–¢–µ–ª–µ—Ñ–æ–Ω *</label>
            <input
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handlePhoneChange}
              placeholder="+7 900 000-00-00"
              className={errors.phone ? styles.inputError : ""}
              disabled={isSubmitting}
            />
            {errors.phone && (
              <span className={styles.errorText}>{errors.phone}</span>
            )}
          </div>

          <div className={styles.inputGroup}>
            <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
            <textarea
              name="comment"
              value={formData.comment}
              onChange={handleChange}
              placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
              rows={4}
              disabled={isSubmitting}
            />
          </div>

          <div className={styles.privacyPolicy}>
            <label className={styles.checkboxLabel}>
              <input
                type="checkbox"
                name="privacyPolicy"
                checked={formData.privacyPolicy}
                onChange={handleChange}
                disabled={isSubmitting}
                className={styles.checkboxInput}
              />
              <span className={styles.checkboxCustom}></span>
              <span className={styles.checkboxText}>
                –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ{" "}
                <a
                  href="/privacy-policy"
                  target="_blank"
                  className={styles.privacyLink}
                >
                  –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                </a>
              </span>
            </label>
            {errors.privacyPolicy && (
              <span className={styles.errorText}>{errors.privacyPolicy}</span>
            )}
          </div>

          {/* –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          {submitStatus === "success" && (
            <div className={styles.successMessage}>
              ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
            </div>
          )}
          {submitStatus === "error" && (
            <div className={styles.errorMessage}>
              ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
            </div>
          )}

          <button
            type="submit"
            className={styles.submitButton}
            disabled={isSubmitting}
          >
            {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}
          </button>
        </form>
      </div>
    </div>
  );
}

export default function Events() {
  const [selectedEvent, setSelectedEvent] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleCardClick = (title: string) => {
    setSelectedEvent(title);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedEvent(null);
  };

  return (
    <section className={styles.container} id="ivents">
      <h2>–°–æ–±—ã—Ç–∏—è</h2>
      <p>
        –ö –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é –º—ã –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫–∞–∫ –∫ –æ—Å–æ–±–µ–Ω–Ω–æ–º—É. <br />
        –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö:
      </p>
      <div className={styles.grid}>
        <Card
          title="–°–í–ê–î–¨–ë–ê"
          image="/ivents/ivent1.webp"
          onCardClick={() => handleCardClick("–°–í–ê–î–¨–ë–ê")}
        />
        <Card
          title="–í–´–ü–£–°–ö–ù–û–ô"
          image="/ivents/ivent2.webp"
          onCardClick={() => handleCardClick("–í–´–ü–£–°–ö–ù–û–ô")}
        />
        <Card
          title="–§–£–†–®–ï–¢"
          image="/ivents/ivent3.webp"
          onCardClick={() => handleCardClick("–§–£–†–®–ï–¢")}
        />
        <Card
          title="–Æ–ë–ò–õ–ï–ô"
          image="/ivents/ivent4.webp"
          onCardClick={() => handleCardClick("–Æ–ë–ò–õ–ï–ô")}
        />
        <Card
          title="–ë–ê–ù–ö–ï–¢"
          image="/ivents/ivent5.webp"
          onCardClick={() => handleCardClick("–ë–ê–ù–ö–ï–¢")}
        />
        <Card
          title="–í–´–ï–ó–î–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø"
          image="/ivents/ivent6.webp"
          onCardClick={() => handleCardClick("–í–´–ï–ó–î–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø")}
        />
      </div>

      <Modal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        eventTitle={selectedEvent || ""}
      />
    </section>
  );
}
